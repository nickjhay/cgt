# DEVELOPERS: when you edit this file, please also edit cgtrc.example

# User options
# ----------------------

# At the cost of some overhead,
# store information in the computation graph that helps with debugging
debug = boolean(default=False)

# single or double precision:
precision = string(default=single) 

# backend=python means using a pure python module to execute the graph, and using python implementations of ops whenever they exist
# backend=native means using the compiled execution graph interpreter, and using the native (c++) implementation of ops
backend = option("python","native",default="python") # "native" means using compiled implementations and 

# Where to put generated files
cache_dir = string(default="~/.cgt_cache")

# Enable in-place optimizations.
enable_inplace_opt = boolean(default=True)

# Enable simplifications of the graph, e.g. arithmetic simplifications like x*1=x
enable_simplification = boolean(default=True)

# Use parallel execution graph interpreter
parallel = boolean(default=False)

# Number of threads
num_threads = integer(default=4)

# Developer Options
# -----------------

# Force native backend to use python
force_python_impl = boolean(default=False)

# Compile C++ files with debug flags
debug_cpp = boolean(default=False) # use debug flags when compiling c++

# Print lots of diagnostic information
# (we'll break this down at some point)
verbose = boolean(default=False)